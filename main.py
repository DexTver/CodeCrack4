#!/usr/bin/env python3
"""
Telegram‚Äë–±–æ—Ç ¬´–ö–æ–¥‚Äë–ú–∞—Å—Ç–µ—Ä¬†4¬ª ‚Äî —É–≥–∞–¥–∞–π 4‚Äë–∑–Ω–∞—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.

üì¶  –ù–æ–≤–æ–µ: *–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã* ‚Äî –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ
     `records.json` –∏ –ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –±–æ—Ç–∞.

‚Ä¢ `.env`  ‚Äî  BOT_TOKEN=‚Ä¶
‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:  `python-telegram-bot>=20`  `python-dotenv`
"""

import json
import logging
import os
import random
import time
from pathlib import Path

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.request import HTTPXRequest
from telegram.error import NetworkError

# ---------------------------------------------------------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ---------------------------------------------------------------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ (—Å–º. .env)")

CODE_LENGTH = 4
RECORD_FILE = Path("records.json")


def load_records() -> dict[int, int]:
    """–ß–∏—Ç–∞–µ—Ç JSON‚Äë—Ñ–∞–π–ª —Ä–µ–∫–æ—Ä–¥–æ–≤. –§–æ—Ä–º–∞—Ç: {user_id(str): attempts(int)}"""
    if RECORD_FILE.exists():
        try:
            data = json.loads(RECORD_FILE.read_text("utf‚Äë8"))
            return {int(uid): int(best) for uid, best in data.items()}
        except (json.JSONDecodeError, ValueError):
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å records.json ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–π –±–∞–∑—ã.")
    return {}


def save_records(records: dict[int, int]) -> None:
    """–ê—Ç–æ–º–∏—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ—Ä–¥—ã –Ω–∞ –¥–∏—Å–∫."""
    tmp = RECORD_FILE.with_suffix(".tmp")
    tmp.write_text(json.dumps(records, ensure_ascii=False), "utf‚Äë8")
    tmp.replace(RECORD_FILE)


RECORDS: dict[int, int] = load_records()

# ---------------------------------------------------------------------------
# 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ UI‚Äë—ç–ª–µ–º–µ–Ω—Ç—ã
# ---------------------------------------------------------------------------

def generate_secret(length: int = CODE_LENGTH) -> str:
    return "".join(str(random.randint(0, 9)) for _ in range(length))


def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([["üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", "üèÜ –†–µ–∫–æ—Ä–¥"]], resize_keyboard=True)

# ---------------------------------------------------------------------------
# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ---------------------------------------------------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    intro = (
        "ü§ñ *–ö–æ–¥‚Äë–ú–∞—Å—Ç–µ—Ä¬†4*\n\n"
        "–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é *—Å–µ–∫—Ä–µ—Ç–Ω—ã–π 4‚Äë–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥*. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî —É–≥–∞–¥–∞—Ç—å –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏. "
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ —è –ø–æ–∫–∞–∑—ã–≤–∞—é —à–∞–±–ª–æ–Ω (–ø—Ä–∏–º–µ—Ä: `4*2*`). "
        "–ó–≤—ë–∑–¥–æ—á–∫–∏¬†`*` ‚Äî –µ—â—ë –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ *¬´üéÆ¬†–ù–æ–≤–∞—è –∏–≥—Ä–∞¬ª* –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∏–∑ 4 —Ü–∏—Ñ—Ä."
    )
    await update.message.reply_text(intro, parse_mode="Markdown", reply_markup=main_keyboard())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/newgame ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/record ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ä–µ–∫–æ—Ä–¥",
        reply_markup=main_keyboard(),
    )


async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.update({
        "secret": generate_secret(),
        "revealed": ["*"] * CODE_LENGTH,
        "attempts": 0,
    })
    await update.message.reply_text("üé≤ –Ø –∑–∞–≥–∞–¥–∞–ª –Ω–æ–≤—ã–π 4‚Äë–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥. –£–¥–∞—á–∏!", reply_markup=main_keyboard())


async def show_record(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    best = RECORDS.get(user_id)
    msg = "–í—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–∫–æ—Ä–¥. –°—ã–≥—Ä–∞–π—Ç–µ –ø–∞—Ä—É –ø–∞—Ä—Ç–∏–π!" if best is None else f"–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî *{best}* –ø–æ–ø—ã—Ç–æ–∫."
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=main_keyboard())

# ---------------------------------------------------------------------------
# 4. –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
# ---------------------------------------------------------------------------

async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()
    user_id = update.effective_user.id

    # –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text == "üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞":
        await new_game(update, context)
        return
    if text == "üèÜ –†–µ–∫–æ—Ä–¥":
        await show_record(update, context)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if not text.isdigit() or len(text) != CODE_LENGTH:
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ {CODE_LENGTH} —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤.",
            reply_markup=main_keyboard(),
        )
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if "secret" not in context.user_data:
        context.user_data.update({
            "secret": generate_secret(),
            "revealed": ["*"] * CODE_LENGTH,
            "attempts": 0,
        })

    secret: str = context.user_data["secret"]
    context.user_data["attempts"] += 1

    for i, (g_digit, s_digit) in enumerate(zip(text, secret)):
        if g_digit == s_digit:
            context.user_data["revealed"][i] = g_digit

    pattern = "".join(context.user_data["revealed"])
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: `{pattern}`", parse_mode="Markdown")

    # –ü–æ–±–µ–¥–∞?
    if text == secret:
        attempts = context.user_data["attempts"]
        best = RECORDS.get(user_id)
        new_record = best is None or attempts < best
        if new_record:
            RECORDS[user_id] = attempts
            save_records(RECORDS)
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ö–æ–¥ *{secret}* —É–≥–∞–¥–∞–Ω –∑–∞ *{attempts}* –ø–æ–ø—ã—Ç–æ–∫." +
            ("\nüèÜ –≠—Ç–æ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!" if new_record else "") +
            "\n–ù–∞–∂–º–∏—Ç–µ ¬´üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞¬ª, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown",
            reply_markup=main_keyboard(),
        )
        for key in ("secret", "revealed", "attempts"):
            context.user_data.pop(key, None)

# ---------------------------------------------------------------------------
# 5. –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
# ---------------------------------------------------------------------------

def create_app():
    request = HTTPXRequest(connect_timeout=10.0, read_timeout=15.0, write_timeout=15.0)
    return ApplicationBuilder().token(BOT_TOKEN).request(request).build()


def main() -> None:
    logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

    while True:
        app = create_app()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("newgame", new_game))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("record", show_record))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess))

        try:
            print("Bot is running‚Ä¶ Press Ctrl‚ÄëC to stop.")
            app.run_polling(allowed_updates=Update.ALL_TYPES, stop_signals=None)
        except NetworkError as e:
            logging.warning("NetworkError: %s ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5¬†—Å–µ–∫—É–Ω–¥‚Ä¶", e)
            time.sleep(5)
        except KeyboardInterrupt:
            print("‚èπ  Bot stopped by user.")
            break


if __name__ == "__main__":
    main()
